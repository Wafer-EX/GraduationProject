@using CoderWebsite.Models

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationContext DbContext

<div class="votingcontrol-cont">
    <div class="votingcontrol-title">Голосование за лучший проект</div>
    
    @if ((voted || !isAuth) || (user != null && votedUsersIds.Contains(user.Id)))
    {
        <PercentageScale Name="Микросервис Система аккаунтов" Percent="GetPercent(VoringVariants.Variant1)" Delay="1" />
        <PercentageScale Name="Микросервис Система кеширования" Percent="GetPercent(VoringVariants.Variant2)" Delay="2" />
        <PercentageScale Name="Микросервис Обработчик изображений" Percent="GetPercent(VoringVariants.Variant3)" Delay="3" />
    }
    else
    {
        <EditForm Model="model" OnValidSubmit=Vote>
            <InputRadioGroup @bind-Value="@model.Value">
                <div class="votingcontrol-vote-variant-cont">
                    <InputRadio Value="VoringVariants.Variant1" />
                    <span class="votingcontrol-vote-variant-text">Микросервис Система аккаунтов</span>
                </div>
                <div class="votingcontrol-vote-variant-cont">
                    <InputRadio Value="VoringVariants.Variant2" />
                    <span class="votingcontrol-vote-variant-text">Микросервис Система кеширования</span>
                </div>
                <div class="votingcontrol-vote-variant-cont">
                    <InputRadio Value="VoringVariants.Variant3" />
                    <span class="votingcontrol-vote-variant-text">Микросервис Обработчик изображений</span>
                </div>
            </InputRadioGroup>

            <div class="votingcontrol-vote-button-cont">
                <button type="submit" class="votingcontrol-vote-button">Проголосовать</button>
            </div>
        </EditForm>
    }
</div>

@code {
    private static Dictionary<VoringVariants, int> votingData;

    private static List<string> votedUsersIds;

    private bool voted = false;

    private VotingModel model = new VotingModel();

    private bool isAuth;

    private User user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var authUser = authState.User;
        isAuth = authUser.Identity.IsAuthenticated;
        if (isAuth) user = DbContext.Users.Where(user => user.Email == authUser.Identity.Name).First();

        if (votingData == null)
        {
            votingData = new Dictionary<VoringVariants, int>();
            for (int i = 0; i < 3; i++)
                votingData.Add((VoringVariants) i, 0);
        }
        if (votedUsersIds == null) votedUsersIds = new List<string>();
    }

    private int GetPercent(VoringVariants variant)
    {
        return (int) CalcPercent(variant);
    }

    private void Vote()
    {
        votingData[model.Value] += 1;
        votedUsersIds.Add(user.Id);
        voted = true;
    }

    private double CalcPercent(VoringVariants variant)
    {
        double sum = 0;
        foreach (double value in votingData.Values)
            sum += value;

        double percent = votingData[variant] / sum * 100;
        return percent;
    }

    private class VotingModel
    {
        public VoringVariants Value { get; set; }
    }
}