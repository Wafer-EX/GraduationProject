@page "/account"

@using CoderWebsite.Components
@using CoderWebsite.Components.Account
@using CoderWebsite.Models
@using Microsoft.AspNetCore.Identity

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationContext DbContext

<PageTitle>Личный кабинет | Кодер</PageTitle>

<PageBlock ColorFrom="black">
    <CascadingAuthenticationState>
        <AuthorizeView Roles="admin">
            <Authorized>
                <div class="access-error-message">Только обычный пользователь имеет доступ к данной странице.</div>
            </Authorized>
            <NotAuthorized>
                <div class="account-container">
                    <span class="account-name-container">
                        <span class="account-fio">@($"{user.FirstName} {user.LastName} {user.MiddleName}")</span>
                        <span class="account-mail">@user.Email</span>
                    </span>
                    <span class="account-buttons-bar-container">
                        <button class="account-button @(GetStyle(OrderCategory.All))" @onclick="() => SelectCategory(OrderCategory.All)">все заказы</button>
                        <button class="account-button @(GetStyle(OrderCategory.InWork))" @onclick="() => SelectCategory(OrderCategory.InWork)">в работе</button>
                        <button class="account-button @(GetStyle(OrderCategory.Closed))" @onclick="() => SelectCategory(OrderCategory.Closed)">завершенные</button>
                    </span>

                    <div class="account-orders-container">
                        @if (orders.Count() > 0)
                        {
                            @for (int i = 0; i < orders.Count(); i++)
                            {
                                var loopOrder = orders.ElementAt(i);
                                <Order
                                    Style="@($"animation-delay: .{i + 1}s")"
                                    Name="@(loopOrder.Name)"
                                    Date="@(loopOrder.Date)"
                                    Phone="@(loopOrder.Phone)"
                                    AppType="@(loopOrder.Type)"
                                    Status="@(loopOrder.Status)"/>
                            }
                        }
                        else
                        {
                            <div class="account-no-orders-text">На данный момент заказов нет.</div>
                        }
                    </div>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </CascadingAuthenticationState>
</PageBlock>

@code {
    private OrderCategory currentCategory = OrderCategory.All;

    private User user;

    private IEnumerable<Models.Order> orders;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var authUser = authState.User;
        if (!authUser.Identity.IsAuthenticated) NavigationManager.NavigateTo("/login", true, true);
        user = DbContext.Users.Where(user => user.Email == authUser.Identity.Name).First();
        orders = DbContext.Orders.Where(order => order.User == user);
    }

    private void SelectCategory(OrderCategory category)
    {
        currentCategory = category;
        switch (category)
        {
            case OrderCategory.All:
                orders = user.Orders;
                break;
            case OrderCategory.InWork:
                orders = user.Orders.Where(order => order.Status != OrderStatus.Completed);
                break;
            case OrderCategory.Closed:
                orders = user.Orders.Where(order => order.Status == OrderStatus.Completed);
                break;
        }
        StateHasChanged();
    }

    private string GetStyle(OrderCategory category)
    {
        if (category == currentCategory)
            return "account-selected-button";
        else return "";
    }
}