@page "/admin/user-orders/{Id}"

@using CoderWebsite.Components
@using CoderWebsite.Components.Account
@using CoderWebsite.Components.Admin.UserOrders
@using CoderWebsite.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore

@inject ApplicationContext DbContext
@inject UserManager<User> UserManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationState

<PageTitle>Заказы пользователя | Кодер</PageTitle>

<PageBlock>
    @if (checkedUser != null)
    {
        <div class="user-orders-title-container">
            <span class="user-orders-title">Заказы пользователя @($"{checkedUser.LastName} {checkedUser.FirstName} {checkedUser.MiddleName}")</span>
            <span class="user-orders-title-fio">@checkedUser.Email</span>
        </div>

        <div class="user-orders-container">
            <div class="user-orders-list-container">
                @foreach (var order in checkedUser.Orders)
                {
                    <OrderLine Order="order" />
                }
            </div>
        </div>
    }
    else
    {
        <div class="user-orders-no-user-message">Пользователь не найден.</div>
    }
</PageBlock>

@code {
    private User checkedUser;

    [Parameter] public string Id { get; set; }

    protected override void OnInitialized()
    {
        var authState = AuthenticationState.GetAuthenticationStateAsync().Result;
        var user = UserManager.GetUserAsync(authState.User).Result;
        if (user == null) NavigationManager.NavigateTo("/login");

        var dbCheckedUser = DbContext.Users.Where(user => user.Id == Id).Include(user => user.Orders);
        if (dbCheckedUser.Count() > 0)
            checkedUser = dbCheckedUser.First();
    }
}