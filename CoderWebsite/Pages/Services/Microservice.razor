@page "/services/microservice"

@using CoderWebsite.Components
@using CoderWebsite.Components.BlockContent
@using CoderWebsite.Models

@inject ApplicationContext DbContext

<PageTitle>@(string.IsNullOrEmpty(metaTitle) ? "Микросервисы gRPC и ZeroC Ice | Кодер" : $"{metaTitle} | Кодер")</PageTitle>
<HeadContent>
    @if (!string.IsNullOrEmpty(metaDesc)) { <meta name="description" content="@metaDesc"> }
</HeadContent>

<PageBlock>
    <CallText Title="Микросервисная архитектура" ButtonText="Заказать микросервис" ButtonRedirect="/ordering">
        Микросервисная архитектура решает главную задачу программистов на масштабных 
        проектах: превращает сложную и объёмную программу в набор простых деталей, 
        которые работают вместе.
        <br />
        <br />
        Преимущества микросервисной архитектуры:
        <ul>
            <li>нет привязки к конкретным языкам и технологиям;</li>
            <li>простая интеграция со сторонними решениями и возможность повторного использования;</li>
            <li>практически бесконечная масштабируемость.</li>
        </ul>
    </CallText>
</PageBlock>

<PageBlock>
    <CallText Title="Микросервисы gRPC">
        <BoxItem ImagePath="/icons/grpc-logo-white.png">
            gRPC — это система удалённого вызова процедур с открытым исходным кодом, 
            первоначально разработанная в Google в 2015 году. gRPC простой в использовании, 
            отлично подходит для создания распределенных систем (микросервисов) и API. Имеет 
            встроенную поддержку для балансировки нагрузки, трассировки, аутентификации и 
            проверки жизнеспособности сервисов.
        </BoxItem>
    </CallText>
</PageBlock>

<PageBlock>
    <CallText Title="Микросервисы ZeroC Ice">
        <BoxItem ImagePath="/icons/zeroc-ice-logo-white.png">
            Ice - это объектно-ориентированная среда RPC, которая может помочь легко создавать 
            распределенные приложения. Используя Ice, пользователи могут больше сосредоточиться 
            на логике своих приложений. Используя Ice, больше не нужно беспокоиться о некоторых 
            деталях, таких как открытые сетевые соединения, сериализация и десериализация сетевой 
            передачи, а также проблемы повторной передачи при сбое соединения.
        </BoxItem>
    </CallText>
</PageBlock>

@code {
    private string? metaTitle;

    private string? metaDesc;

    protected override async Task OnInitializedAsync()
    {
        var elements = DbContext.MetaPageDescriptions.Where(meta => meta.PageName == "MicroservicesPage");
        if (elements.Count() > 0)
        {
            metaTitle = elements.First().Title;
            metaDesc = elements.First().Description;
        }
    }
}